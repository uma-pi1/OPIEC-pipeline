/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avroschema.linked;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SpaceLinked extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SpaceLinked\",\"namespace\":\"avroschema.linked\",\"fields\":[{\"name\":\"core_words\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TokenLinked\",\"fields\":[{\"name\":\"pos\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"ner\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"span\",\"type\":{\"type\":\"record\",\"name\":\"Span\",\"fields\":[{\"name\":\"start_index\",\"type\":[\"int\",\"null\"]},{\"name\":\"end_index\",\"type\":[\"int\",\"null\"]}]}},{\"name\":\"lemma\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"word\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"index\",\"type\":[\"int\",\"null\"]},{\"name\":\"w_link\",\"type\":{\"type\":\"record\",\"name\":\"WikiLink\",\"fields\":[{\"name\":\"offset_begin_ind\",\"type\":\"int\"},{\"name\":\"offset_end_ind\",\"type\":\"int\"},{\"name\":\"phrase\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"wiki_link\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}}]},{\"name\":\"pre_mods\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"TokenLinked\"}]},{\"name\":\"post_mods\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"TokenLinked\"}]},{\"name\":\"all_words\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"TokenLinked\"}]},{\"name\":\"predicate\",\"type\":[\"null\",\"TokenLinked\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<avroschema.linked.TokenLinked> core_words;
  @Deprecated public java.util.List<avroschema.linked.TokenLinked> pre_mods;
  @Deprecated public java.util.List<avroschema.linked.TokenLinked> post_mods;
  @Deprecated public java.util.List<avroschema.linked.TokenLinked> all_words;
  @Deprecated public avroschema.linked.TokenLinked predicate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SpaceLinked() {}

  /**
   * All-args constructor.
   */
  public SpaceLinked(java.util.List<avroschema.linked.TokenLinked> core_words, java.util.List<avroschema.linked.TokenLinked> pre_mods, java.util.List<avroschema.linked.TokenLinked> post_mods, java.util.List<avroschema.linked.TokenLinked> all_words, avroschema.linked.TokenLinked predicate) {
    this.core_words = core_words;
    this.pre_mods = pre_mods;
    this.post_mods = post_mods;
    this.all_words = all_words;
    this.predicate = predicate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return core_words;
    case 1: return pre_mods;
    case 2: return post_mods;
    case 3: return all_words;
    case 4: return predicate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: core_words = (java.util.List<avroschema.linked.TokenLinked>)value$; break;
    case 1: pre_mods = (java.util.List<avroschema.linked.TokenLinked>)value$; break;
    case 2: post_mods = (java.util.List<avroschema.linked.TokenLinked>)value$; break;
    case 3: all_words = (java.util.List<avroschema.linked.TokenLinked>)value$; break;
    case 4: predicate = (avroschema.linked.TokenLinked)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'core_words' field.
   */
  public java.util.List<avroschema.linked.TokenLinked> getCoreWords() {
    return core_words;
  }

  /**
   * Sets the value of the 'core_words' field.
   * @param value the value to set.
   */
  public void setCoreWords(java.util.List<avroschema.linked.TokenLinked> value) {
    this.core_words = value;
  }

  /**
   * Gets the value of the 'pre_mods' field.
   */
  public java.util.List<avroschema.linked.TokenLinked> getPreMods() {
    return pre_mods;
  }

  /**
   * Sets the value of the 'pre_mods' field.
   * @param value the value to set.
   */
  public void setPreMods(java.util.List<avroschema.linked.TokenLinked> value) {
    this.pre_mods = value;
  }

  /**
   * Gets the value of the 'post_mods' field.
   */
  public java.util.List<avroschema.linked.TokenLinked> getPostMods() {
    return post_mods;
  }

  /**
   * Sets the value of the 'post_mods' field.
   * @param value the value to set.
   */
  public void setPostMods(java.util.List<avroschema.linked.TokenLinked> value) {
    this.post_mods = value;
  }

  /**
   * Gets the value of the 'all_words' field.
   */
  public java.util.List<avroschema.linked.TokenLinked> getAllWords() {
    return all_words;
  }

  /**
   * Sets the value of the 'all_words' field.
   * @param value the value to set.
   */
  public void setAllWords(java.util.List<avroschema.linked.TokenLinked> value) {
    this.all_words = value;
  }

  /**
   * Gets the value of the 'predicate' field.
   */
  public avroschema.linked.TokenLinked getPredicate() {
    return predicate;
  }

  /**
   * Sets the value of the 'predicate' field.
   * @param value the value to set.
   */
  public void setPredicate(avroschema.linked.TokenLinked value) {
    this.predicate = value;
  }

  /** Creates a new SpaceLinked RecordBuilder */
  public static avroschema.linked.SpaceLinked.Builder newBuilder() {
    return new avroschema.linked.SpaceLinked.Builder();
  }
  
  /** Creates a new SpaceLinked RecordBuilder by copying an existing Builder */
  public static avroschema.linked.SpaceLinked.Builder newBuilder(avroschema.linked.SpaceLinked.Builder other) {
    return new avroschema.linked.SpaceLinked.Builder(other);
  }
  
  /** Creates a new SpaceLinked RecordBuilder by copying an existing SpaceLinked instance */
  public static avroschema.linked.SpaceLinked.Builder newBuilder(avroschema.linked.SpaceLinked other) {
    return new avroschema.linked.SpaceLinked.Builder(other);
  }
  
  /**
   * RecordBuilder for SpaceLinked instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SpaceLinked>
    implements org.apache.avro.data.RecordBuilder<SpaceLinked> {

    private java.util.List<avroschema.linked.TokenLinked> core_words;
    private java.util.List<avroschema.linked.TokenLinked> pre_mods;
    private java.util.List<avroschema.linked.TokenLinked> post_mods;
    private java.util.List<avroschema.linked.TokenLinked> all_words;
    private avroschema.linked.TokenLinked predicate;

    /** Creates a new Builder */
    private Builder() {
      super(avroschema.linked.SpaceLinked.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avroschema.linked.SpaceLinked.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.core_words)) {
        this.core_words = data().deepCopy(fields()[0].schema(), other.core_words);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pre_mods)) {
        this.pre_mods = data().deepCopy(fields()[1].schema(), other.pre_mods);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.post_mods)) {
        this.post_mods = data().deepCopy(fields()[2].schema(), other.post_mods);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.all_words)) {
        this.all_words = data().deepCopy(fields()[3].schema(), other.all_words);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.predicate)) {
        this.predicate = data().deepCopy(fields()[4].schema(), other.predicate);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SpaceLinked instance */
    private Builder(avroschema.linked.SpaceLinked other) {
            super(avroschema.linked.SpaceLinked.SCHEMA$);
      if (isValidValue(fields()[0], other.core_words)) {
        this.core_words = data().deepCopy(fields()[0].schema(), other.core_words);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pre_mods)) {
        this.pre_mods = data().deepCopy(fields()[1].schema(), other.pre_mods);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.post_mods)) {
        this.post_mods = data().deepCopy(fields()[2].schema(), other.post_mods);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.all_words)) {
        this.all_words = data().deepCopy(fields()[3].schema(), other.all_words);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.predicate)) {
        this.predicate = data().deepCopy(fields()[4].schema(), other.predicate);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'core_words' field */
    public java.util.List<avroschema.linked.TokenLinked> getCoreWords() {
      return core_words;
    }
    
    /** Sets the value of the 'core_words' field */
    public avroschema.linked.SpaceLinked.Builder setCoreWords(java.util.List<avroschema.linked.TokenLinked> value) {
      validate(fields()[0], value);
      this.core_words = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'core_words' field has been set */
    public boolean hasCoreWords() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'core_words' field */
    public avroschema.linked.SpaceLinked.Builder clearCoreWords() {
      core_words = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'pre_mods' field */
    public java.util.List<avroschema.linked.TokenLinked> getPreMods() {
      return pre_mods;
    }
    
    /** Sets the value of the 'pre_mods' field */
    public avroschema.linked.SpaceLinked.Builder setPreMods(java.util.List<avroschema.linked.TokenLinked> value) {
      validate(fields()[1], value);
      this.pre_mods = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'pre_mods' field has been set */
    public boolean hasPreMods() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'pre_mods' field */
    public avroschema.linked.SpaceLinked.Builder clearPreMods() {
      pre_mods = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'post_mods' field */
    public java.util.List<avroschema.linked.TokenLinked> getPostMods() {
      return post_mods;
    }
    
    /** Sets the value of the 'post_mods' field */
    public avroschema.linked.SpaceLinked.Builder setPostMods(java.util.List<avroschema.linked.TokenLinked> value) {
      validate(fields()[2], value);
      this.post_mods = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'post_mods' field has been set */
    public boolean hasPostMods() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'post_mods' field */
    public avroschema.linked.SpaceLinked.Builder clearPostMods() {
      post_mods = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'all_words' field */
    public java.util.List<avroschema.linked.TokenLinked> getAllWords() {
      return all_words;
    }
    
    /** Sets the value of the 'all_words' field */
    public avroschema.linked.SpaceLinked.Builder setAllWords(java.util.List<avroschema.linked.TokenLinked> value) {
      validate(fields()[3], value);
      this.all_words = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'all_words' field has been set */
    public boolean hasAllWords() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'all_words' field */
    public avroschema.linked.SpaceLinked.Builder clearAllWords() {
      all_words = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'predicate' field */
    public avroschema.linked.TokenLinked getPredicate() {
      return predicate;
    }
    
    /** Sets the value of the 'predicate' field */
    public avroschema.linked.SpaceLinked.Builder setPredicate(avroschema.linked.TokenLinked value) {
      validate(fields()[4], value);
      this.predicate = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'predicate' field has been set */
    public boolean hasPredicate() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'predicate' field */
    public avroschema.linked.SpaceLinked.Builder clearPredicate() {
      predicate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public SpaceLinked build() {
      try {
        SpaceLinked record = new SpaceLinked();
        record.core_words = fieldSetFlags()[0] ? this.core_words : (java.util.List<avroschema.linked.TokenLinked>) defaultValue(fields()[0]);
        record.pre_mods = fieldSetFlags()[1] ? this.pre_mods : (java.util.List<avroschema.linked.TokenLinked>) defaultValue(fields()[1]);
        record.post_mods = fieldSetFlags()[2] ? this.post_mods : (java.util.List<avroschema.linked.TokenLinked>) defaultValue(fields()[2]);
        record.all_words = fieldSetFlags()[3] ? this.all_words : (java.util.List<avroschema.linked.TokenLinked>) defaultValue(fields()[3]);
        record.predicate = fieldSetFlags()[4] ? this.predicate : (avroschema.linked.TokenLinked) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
